/* VALIDATE STRING IF JSON */
--Referrence: https://oracle-base.com/articles/12c/json-support-in-oracle-database-12cr1#is-json

SET SERVEROUTPUT ON
DECLARE
    stringin    varchar2(100);
BEGIN
    --stringin := '["test", "something", "hehehe"]';
    stringin := '[1, 2, 3]'; -- => This will result TRUE
    --stringin := '[{1, 2, 3]'; -- => This will result FALSE
    
    IF stringin IS JSON THEN 
        DBMS_OUTPUT.put_line ('IS JSON TRUE ' );
    ELSE
        DBMS_OUTPUT.put_line ('IS JSON FALSE ' );
    END IF;
END;


/* IF STRING IS JSON ARRAY THEN YOU CAN PARSE IT AND WRITE VALUES */
SET SERVEROUTPUT ON
DECLARE
    stringin    varchar2(100);
    l_array     json_array_t;
BEGIN
    stringin := '[1, 2, 3]';
   l_array := json_array_t.parse (stringin);
   
   DBMS_OUTPUT.put_line ('Number of elements in array: ' || l_array.get_size ());
   
   FOR indx IN 0 .. l_array.get_size - 1
   LOOP
      DBMS_OUTPUT.put_line ('numbers: ' || l_array.get_string (indx));
   END LOOP;
   
   DBMS_OUTPUT.PUT_LINE(l_array.stringify());
END;

/* OUTPUT:
        Number of elements in array: 3
        numbers: 1
        numbers: 2
        numbers: 3
        [1,2,3]
        
        
        PL/SQL procedure successfully completed.
*/


/* RECEIVING JSON ARRAY CONTAINING JSON OBJECTS */
set serveroutput on
Declare

input_text clob := '[
	{
		"Artikelnr": "00000100001",
		"BezLang": "item test 1 "
	},
	{
		"Artikelnr": "00000230006",
		"BezLang": "item test 2"
	}
]';
p_object json_object_t;
l_json_a json_array_t;
l_itemnr varchar2(200);

begin

dbms_output.put_line('input_text= ' || input_text);
IF input_text is json THEN dbms_output.put_line('it is indeed json =) '); END IF;
--p_object := input_text;
l_json_a := json_array_t.parse(input_text);


DBMS_OUTPUT.put_line ('Number of elements in array: ' || l_json_a.get_size ());
   
   FOR indx IN 0 .. l_json_a.get_size - 1
   LOOP
        --p_object := json_object_t.parse(l_json_a.get_string (indx)); /*not working*/
        p_object := treat(l_json_a.get(indx) as json_object_t );
        DBMS_OUTPUT.put_line ('obj: ' || indx || ' - ' || p_object.to_string);
        
        IF p_object.has('Artikelnr') 
        THEN 
            dbms_output.put_line('it has indeed artikelnr =) '); 
            l_itemnr := p_object.get_string('Artikelnr');
            DBMS_OUTPUT.put_line ('artikelnr: ' || indx || ' - ' || l_itemnr);
        ELSE
            dbms_output.put_line('this object doesn''t have this name/property!'); 
        END IF; /*JSON is case sensitive to both field names and data!*/
   END LOOP;
end;



/* FUNCTION TO JSON ESCAPE CHARACTERS IN ORDS API RESPONSE */
FUNCTION F_UTIL_JSON_ESC_CHAR(p_text IN varchar2) 
RETURN VARCHAR2
IS
    v_text VARCHAR2(400);

BEGIN
    /* REGEXP_REPLACE - replaces all JSON control characters - " quotation mark and \ reverse solidus-backslash */
    --v_text := REGEXP_REPLACE(p_text, '([\|"])', '', 1, 0);
    /* EDIT MOLNARGA 2024 02 29 seperated regexp, different chars, different actions because of filepaths */
    v_text := REGEXP_REPLACE(p_text, '([|"])', '', 1, 0);
    v_text := REGEXP_REPLACE(v_text, '([\/])', '\\\1', 1, 0);

    /* REPLACE - replaces all non-control characters */
    v_text := REPLACE(v_text,chr(9), chr(32)); /* chr(9) -Horizontal tab => chr(32) simple space?*/
    v_text := REPLACE(v_text,chr(10), chr(32)); /* chr(10) - New Line => */
    
    RETURN v_text;
    
EXCEPTION
    WHEN OTHERS
        THEN raise_application_error(-20100, 'F_UTIL_JSON_ESC_CHAR ERROR - '|| 'sql error= ' || SQLERRM(SQLCODE));    
    
END;



